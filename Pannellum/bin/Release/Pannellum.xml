<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pannellum</name>
    </assembly>
    <members>
        <member name="T:Pannellum.EquirectToRect">
            <summary>
            The renderer class.
            Contains all methods for projecting Equirectangular frame to Rectilinear frame
            </summary>
        </member>
        <member name="P:Pannellum.EquirectToRect.Pitch">
            <summary>
            Pitch to render at (in radians)
            </summary>
        </member>
        <member name="P:Pannellum.EquirectToRect.Yaw">
            <summary>
            Yaw to render at (in radians)
            </summary>
        </member>
        <member name="P:Pannellum.EquirectToRect.Roll">
            <summary>
            Camera Roll (in radians)
            </summary>
        </member>
        <member name="M:Pannellum.EquirectToRect.#ctor(OpenTK.GLControl,System.Drawing.Size,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initialize renderer
            </summary>
            <param name="viewer">GLcontrol object to draw a rectlinear frame</param>
            <param name="size">Size of the canvas (viewer)</param>
            <param name="haov">Horizontal angle of view (in radians)</param>
            <param name="vaov">Vertical angle of view (in radians)</param>
            <param name="voffset">Vertical offset angle (in radians)</param>
            <param name="hfov">Horizontal field of view to render with (in radians)</param>
        </member>
        <member name="M:Pannellum.EquirectToRect.#ctor(OpenTK.GLControl,System.Drawing.Size,System.Single)">
            <summary>
            Initialize renderer with default values of haov = 2π, vaov = π and voffset = 0
            </summary>
            <param name="viewer">GLcontrol object to draw a rectlinear frame</param>
            <param name="size">Size of the canvas (viewer)</param>
            <param name="hfov">Horizontal field of view to render with (in radians)</param>
        </member>
        <member name="M:Pannellum.EquirectToRect.Render(OpenCvSharp.Mat)">
            <summary>
            Render the scene based on properties (Pitch, Yaw, Roll, etc...)
            All properties are re-calculated to ensure if they are in valid ranges
            This method also makes the viewer current context and performs swapping buffers
            </summary>
            <param name="frame"></param>
        </member>
    </members>
</doc>
